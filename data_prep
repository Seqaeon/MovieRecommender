{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10459415,"sourceType":"datasetVersion","datasetId":3816617}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:18:59.025191Z","iopub.execute_input":"2025-01-13T19:18:59.025539Z","iopub.status.idle":"2025-01-13T19:18:59.442219Z","shell.execute_reply.started":"2025-01-13T19:18:59.025511Z","shell.execute_reply":"2025-01-13T19:18:59.440933Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import gc\ngc.collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:18:59.505547Z","iopub.execute_input":"2025-01-13T19:18:59.505982Z","iopub.status.idle":"2025-01-13T19:18:59.588096Z","shell.execute_reply.started":"2025-01-13T19:18:59.505941Z","shell.execute_reply":"2025-01-13T19:18:59.586986Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport pandas as pd\nfrom tqdm import tqdm\nimport numpy as np\n#\n\nfrom multiprocessing import Pool, cpu_count\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:18:59.589117Z","iopub.execute_input":"2025-01-13T19:18:59.589499Z","iopub.status.idle":"2025-01-13T19:18:59.615004Z","shell.execute_reply.started":"2025-01-13T19:18:59.589467Z","shell.execute_reply":"2025-01-13T19:18:59.613609Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"json_files = ['title.episode.tsv.gz',\n                 'title.crew.tsv.gz',\n                 'title.principals.tsv.gz',\n                 'title.basics.tsv.gz',\n                 'title.akas.tsv.gz',\n                 'name.basics.tsv.gz',\n                 'title.ratings.tsv.gz']\n\n\nfor j,i in enumerate(tqdm(json_files)):\n    file_path = f\"https://datasets.imdbws.com/{i}\"\n    # Read the compressed .tsv file into a DataFrame\n    if j!=3:\n        df = pd.read_csv(file_path, compression='gzip', delimiter='\\t', low_memory=False)#, nrows=1000)\n    else:\n        df = pd.read_csv(file_path, compression='gzip', delimiter='\\t',low_memory=False)\n        filtered_list = ['short', 'movie', 'tvMovie', 'tvSeries', 'tvMiniSeries', 'video']\n        df = df[df['titleType'].isin(filtered_list)]\n\n\n        \n    \n    # Dynamically create a variable name\n    globals()[f\"df_{j}\"] = df\n\n\n# Access DataFrames\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:18:59.616136Z","iopub.execute_input":"2025-01-13T19:18:59.616488Z","iopub.status.idle":"2025-01-13T19:26:10.781055Z","shell.execute_reply.started":"2025-01-13T19:18:59.616443Z","shell.execute_reply":"2025-01-13T19:26:10.779683Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df_3.copy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:26:10.783967Z","iopub.execute_input":"2025-01-13T19:26:10.784266Z","iopub.status.idle":"2025-01-13T19:26:11.151787Z","shell.execute_reply.started":"2025-01-13T19:26:10.784241Z","shell.execute_reply":"2025-01-13T19:26:11.150557Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['directors'] = None\ndf['writers'] = None\ndf['actors'] = None\ndf['crew'] =None","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:26:11.154211Z","iopub.execute_input":"2025-01-13T19:26:11.154534Z","iopub.status.idle":"2025-01-13T19:26:11.261402Z","shell.execute_reply.started":"2025-01-13T19:26:11.154506Z","shell.execute_reply":"2025-01-13T19:26:11.260353Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_other_crew = df_2[(df_2['category']==\"composer\") | (df_2['category']==\"cinematographer\") | (df_2['category']==\"editor\") | (df_2['category']==\"production_designer\")]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:26:11.262500Z","iopub.execute_input":"2025-01-13T19:26:11.262892Z","iopub.status.idle":"2025-01-13T19:26:37.883313Z","shell.execute_reply.started":"2025-01-13T19:26:11.262861Z","shell.execute_reply":"2025-01-13T19:26:37.882266Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_actors = df_2[(df_2['category']==\"actor\") | (df_2['category']==\"actress\")  | (df_2['category']==\"self\")]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:26:37.884379Z","iopub.execute_input":"2025-01-13T19:26:37.884818Z","iopub.status.idle":"2025-01-13T19:27:01.968695Z","shell.execute_reply.started":"2025-01-13T19:26:37.884756Z","shell.execute_reply":"2025-01-13T19:27:01.967687Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_other_crew = df_other_crew.groupby(\"tconst\")['nconst'].agg(list).to_dict()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:27:01.969627Z","iopub.execute_input":"2025-01-13T19:27:01.970029Z","iopub.status.idle":"2025-01-13T19:28:43.328068Z","shell.execute_reply.started":"2025-01-13T19:27:01.969979Z","shell.execute_reply":"2025-01-13T19:28:43.326993Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_actors = df_actors.groupby(\"tconst\")['nconst'].agg(list).to_dict()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:28:43.329197Z","iopub.execute_input":"2025-01-13T19:28:43.329553Z","iopub.status.idle":"2025-01-13T19:32:11.141405Z","shell.execute_reply.started":"2025-01-13T19:28:43.329517Z","shell.execute_reply":"2025-01-13T19:32:11.140283Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"del df_2\ndel df_0\ndel df_4\ndf_5 = df_5[['nconst', 'primaryName']]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:32:11.142542Z","iopub.execute_input":"2025-01-13T19:32:11.142833Z","iopub.status.idle":"2025-01-13T19:32:17.630203Z","shell.execute_reply.started":"2025-01-13T19:32:11.142809Z","shell.execute_reply":"2025-01-13T19:32:17.629129Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"len(df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:32:17.631261Z","iopub.execute_input":"2025-01-13T19:32:17.631567Z","iopub.status.idle":"2025-01-13T19:32:17.637413Z","shell.execute_reply.started":"2025-01-13T19:32:17.631528Z","shell.execute_reply":"2025-01-13T19:32:17.636423Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df.merge(df_6, on='tconst', how='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:32:17.638543Z","iopub.execute_input":"2025-01-13T19:32:17.638997Z","iopub.status.idle":"2025-01-13T19:32:25.176634Z","shell.execute_reply.started":"2025-01-13T19:32:17.638959Z","shell.execute_reply":"2025-01-13T19:32:25.175630Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df.merge(df_1, on='tconst', how='left')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:32:25.177640Z","iopub.execute_input":"2025-01-13T19:32:25.177963Z","iopub.status.idle":"2025-01-13T19:32:50.224788Z","shell.execute_reply.started":"2025-01-13T19:32:25.177935Z","shell.execute_reply":"2025-01-13T19:32:50.223501Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"del df_1\ndel df_6","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:32:50.226505Z","iopub.execute_input":"2025-01-13T19:32:50.226959Z","iopub.status.idle":"2025-01-13T19:32:50.795213Z","shell.execute_reply.started":"2025-01-13T19:32:50.226914Z","shell.execute_reply":"2025-01-13T19:32:50.794150Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# Create a new column using the dictionary\ndf['actors'] = df['tconst'].map(df_actors)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:32:50.796301Z","iopub.execute_input":"2025-01-13T19:32:50.796614Z","iopub.status.idle":"2025-01-13T19:33:01.152495Z","shell.execute_reply.started":"2025-01-13T19:32:50.796573Z","shell.execute_reply":"2025-01-13T19:33:01.151608Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df.drop(['directors_x', 'writers_x'], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:01.153455Z","iopub.execute_input":"2025-01-13T19:33:01.153703Z","iopub.status.idle":"2025-01-13T19:33:01.879300Z","shell.execute_reply.started":"2025-01-13T19:33:01.153682Z","shell.execute_reply":"2025-01-13T19:33:01.878251Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df.rename(columns={\n    'directors_y': 'directors',\n    'writers_y': 'writers'\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:01.880345Z","iopub.execute_input":"2025-01-13T19:33:01.880638Z","iopub.status.idle":"2025-01-13T19:33:04.951311Z","shell.execute_reply.started":"2025-01-13T19:33:01.880612Z","shell.execute_reply":"2025-01-13T19:33:04.950147Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['crew'] = df['tconst'].map(df_other_crew)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:04.952306Z","iopub.execute_input":"2025-01-13T19:33:04.952557Z","iopub.status.idle":"2025-01-13T19:33:11.252844Z","shell.execute_reply.started":"2025-01-13T19:33:04.952535Z","shell.execute_reply":"2025-01-13T19:33:11.251686Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:11.253990Z","iopub.execute_input":"2025-01-13T19:33:11.254396Z","iopub.status.idle":"2025-01-13T19:33:11.262151Z","shell.execute_reply.started":"2025-01-13T19:33:11.254357Z","shell.execute_reply":"2025-01-13T19:33:11.261202Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[df['tconst'] == \"tt0000001\"]['actors']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:11.263378Z","iopub.execute_input":"2025-01-13T19:33:11.263718Z","iopub.status.idle":"2025-01-13T19:33:11.512619Z","shell.execute_reply.started":"2025-01-13T19:33:11.263690Z","shell.execute_reply":"2025-01-13T19:33:11.511480Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# df_overview = pd.read_csv(\"/kaggle/input/TMDB_movie_dataset_v11.csv\")\n\n# df_overview = df_overview[(df_overview['overview'].notnull()) & (df_overview['imdb_id'].notnull())]\n# (df_overview['overview'].isnull().sum()/len(df_overview))*100\n# df_overview.columns\n# df_overview[df_overview['title'].str.contains(\"Squid Game\", na=False)][['title' ,'homepage', 'imdb_id', 'budget', 'popularity', 'revenue']]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:11.513743Z","iopub.execute_input":"2025-01-13T19:33:11.514149Z","iopub.status.idle":"2025-01-13T19:33:11.527367Z","shell.execute_reply.started":"2025-01-13T19:33:11.514110Z","shell.execute_reply":"2025-01-13T19:33:11.525844Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"len(df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:11.532880Z","iopub.execute_input":"2025-01-13T19:33:11.533304Z","iopub.status.idle":"2025-01-13T19:33:11.547692Z","shell.execute_reply.started":"2025-01-13T19:33:11.533271Z","shell.execute_reply":"2025-01-13T19:33:11.546617Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"del df_actors\ndel df_other_crew","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:11.550188Z","iopub.execute_input":"2025-01-13T19:33:11.550577Z","iopub.status.idle":"2025-01-13T19:33:13.344434Z","shell.execute_reply.started":"2025-01-13T19:33:11.550542Z","shell.execute_reply":"2025-01-13T19:33:13.343252Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"l = ['actors', 'crew', 'directors', 'writers']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:13.345653Z","iopub.execute_input":"2025-01-13T19:33:13.346082Z","iopub.status.idle":"2025-01-13T19:33:13.363899Z","shell.execute_reply.started":"2025-01-13T19:33:13.346040Z","shell.execute_reply":"2025-01-13T19:33:13.362805Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_5","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:13.365020Z","iopub.execute_input":"2025-01-13T19:33:13.365416Z","iopub.status.idle":"2025-01-13T19:33:13.393910Z","shell.execute_reply.started":"2025-01-13T19:33:13.365383Z","shell.execute_reply":"2025-01-13T19:33:13.392895Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_5['nconst'].nunique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:13.394828Z","iopub.execute_input":"2025-01-13T19:33:13.395184Z","iopub.status.idle":"2025-01-13T19:33:26.154261Z","shell.execute_reply.started":"2025-01-13T19:33:13.395149Z","shell.execute_reply":"2025-01-13T19:33:26.153147Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#df[l] = df[l].fillna(\"\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:26.155298Z","iopub.execute_input":"2025-01-13T19:33:26.155603Z","iopub.status.idle":"2025-01-13T19:33:26.159992Z","shell.execute_reply.started":"2025-01-13T19:33:26.155574Z","shell.execute_reply":"2025-01-13T19:33:26.158876Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"l","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:26.161212Z","iopub.execute_input":"2025-01-13T19:33:26.161550Z","iopub.status.idle":"2025-01-13T19:33:26.180414Z","shell.execute_reply.started":"2025-01-13T19:33:26.161523Z","shell.execute_reply":"2025-01-13T19:33:26.179371Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#df[l] =\n\n# for i in l:\n#     df[i] = df[i].apply(\n    \n#         lambda x: [] if pd.isna(x) else x)\n\n\n# Custom function to replace NaN with empty lists\ndef replace_nan_with_empty_list(x):\n    \"\"\"\n    Replace NaN values with empty lists.\n    If the input is already a list, check for \"\\\\N\" and handle empty lists.\n    \"\"\"\n    if isinstance(x, list):\n        if not x:  # Check if the list is empty\n            return []\n        elif x[0] == \"\\\\N\":  # Check for \"\\\\N\" in the list\n            return []\n        else:\n            return x\n    elif x == \"\\\\N\":\n        return []\n    elif pd.isna(x):  # Handle NaN values\n        return []\n    else:  # Handle non-list, non-NaN values\n        return x\n\n\n# Apply the custom function to each column\nfor i in l:\n    df[i] = df[i].apply(replace_nan_with_empty_list)\n\n\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:26.181448Z","iopub.execute_input":"2025-01-13T19:33:26.181797Z","iopub.status.idle":"2025-01-13T19:33:34.430373Z","shell.execute_reply.started":"2025-01-13T19:33:26.181739Z","shell.execute_reply":"2025-01-13T19:33:34.429277Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Set regex=False to treat the pattern as a literal string\ndf[df['directors'].str.contains('\\\\N', regex=False, na=False)]\n#df[df['directors'].str.contains(r'\\N', na=False)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:34.431398Z","iopub.execute_input":"2025-01-13T19:33:34.431705Z","iopub.status.idle":"2025-01-13T19:33:35.424450Z","shell.execute_reply.started":"2025-01-13T19:33:34.431675Z","shell.execute_reply":"2025-01-13T19:33:35.423526Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[['primaryTitle', 'originalTitle']] = df[['primaryTitle', 'originalTitle']].fillna(\"\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:35.425480Z","iopub.execute_input":"2025-01-13T19:33:35.425727Z","iopub.status.idle":"2025-01-13T19:33:37.215459Z","shell.execute_reply.started":"2025-01-13T19:33:35.425706Z","shell.execute_reply":"2025-01-13T19:33:37.214548Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[['averageRating','numVotes' ]] = df[['averageRating','numVotes' ]].fillna(0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:37.216390Z","iopub.execute_input":"2025-01-13T19:33:37.216639Z","iopub.status.idle":"2025-01-13T19:33:37.283317Z","shell.execute_reply.started":"2025-01-13T19:33:37.216616Z","shell.execute_reply":"2025-01-13T19:33:37.282374Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:37.284262Z","iopub.execute_input":"2025-01-13T19:33:37.284534Z","iopub.status.idle":"2025-01-13T19:33:39.423497Z","shell.execute_reply.started":"2025-01-13T19:33:37.284509Z","shell.execute_reply":"2025-01-13T19:33:39.422456Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_names = df_5.set_index('nconst')['primaryName'].to_dict()\n\n#df_5.groupby(\"nconst\")['primaryName'].agg(str).to_dict()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:33:39.424593Z","iopub.execute_input":"2025-01-13T19:33:39.424994Z","iopub.status.idle":"2025-01-13T19:34:01.862881Z","shell.execute_reply.started":"2025-01-13T19:33:39.424957Z","shell.execute_reply":"2025-01-13T19:34:01.861874Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['actors']#.apply(split())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:34:01.863825Z","iopub.execute_input":"2025-01-13T19:34:01.864186Z","iopub.status.idle":"2025-01-13T19:34:01.872828Z","shell.execute_reply.started":"2025-01-13T19:34:01.864150Z","shell.execute_reply":"2025-01-13T19:34:01.871983Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def decode_names(x):\n    \"\"\"\n    Replace NaN values with empty lists.\n    If the input is already a list, check for \"\\\\N\" and handle empty lists.\n    \"\"\"\n    if isinstance(x, list):\n        if not x:  # Check if the list is empty\n            return []\n        elif x[0] == \"\\\\N\":  # Check for \"\\\\N\" in the list\n            return []\n        else:\n            return [df_names.get(i, \"Unknown\") for i in x if isinstance(i, str)]\n    elif x == \"\\\\N\":\n        return []\n    elif pd.isna(x):  # Handle NaN values\n        return []\n    else:  # Handle non-list, non-NaN values\n        return [df_names.get(i.strip(), \"Unknown\") for i in x.split(\",\") if isinstance(i, str)]\n\n\n# Apply the custom function to each column\nfor i in l:\n    df[i] = df[i].apply(decode_names)\n\nprint(\"Updated DataFrame:\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:34:01.873637Z","iopub.execute_input":"2025-01-13T19:34:01.873965Z","iopub.status.idle":"2025-01-13T19:34:54.772451Z","shell.execute_reply.started":"2025-01-13T19:34:01.873922Z","shell.execute_reply":"2025-01-13T19:34:54.771255Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"del df_5\ndel df_names","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:34:54.773508Z","iopub.execute_input":"2025-01-13T19:34:54.773828Z","iopub.status.idle":"2025-01-13T19:34:55.225268Z","shell.execute_reply.started":"2025-01-13T19:34:54.773793Z","shell.execute_reply":"2025-01-13T19:34:55.223959Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import gc\ngc.collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:34:55.226390Z","iopub.execute_input":"2025-01-13T19:34:55.226799Z","iopub.status.idle":"2025-01-13T19:34:59.953779Z","shell.execute_reply.started":"2025-01-13T19:34:55.226726Z","shell.execute_reply":"2025-01-13T19:34:59.952580Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def split_genre(x):\n#     return x.split(\",\")\n# df['genres'].apply(split_genre)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:34:59.954862Z","iopub.execute_input":"2025-01-13T19:34:59.955181Z","iopub.status.idle":"2025-01-13T19:34:59.974274Z","shell.execute_reply.started":"2025-01-13T19:34:59.955155Z","shell.execute_reply":"2025-01-13T19:34:59.973361Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def clean_genre(x):\n    \"\"\"\n    Replace NaN values with empty lists.\n    If the input is already a list, check for \"\\\\N\" and handle empty lists.\n    \"\"\"\n    if isinstance(x, list):\n        if not x:  # Check if the list is empty\n            return []\n        elif x[0] == \"\\\\N\":  # Check for \"\\\\N\" in the list\n            return []\n        else:\n            return x #[df_names.get(i, \"Unknown\") for i in x if isinstance(i, str)]\n    elif x == \"\\\\N\":\n        return []\n    elif pd.isna(x):  # Handle NaN values\n        return []\n    else:  # Handle non-list, non-NaN values\n        return x.split(\",\")\n\n\ndf[\"genres\"] = df['genres'].apply(clean_genre)\n\nprint(\"Updated DataFrame:\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:34:59.975215Z","iopub.execute_input":"2025-01-13T19:34:59.975518Z","iopub.status.idle":"2025-01-13T19:35:02.464740Z","shell.execute_reply.started":"2025-01-13T19:34:59.975481Z","shell.execute_reply":"2025-01-13T19:35:02.463339Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"(df == \"\\\\N\").sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:35:02.465785Z","iopub.execute_input":"2025-01-13T19:35:02.466106Z","iopub.status.idle":"2025-01-13T19:35:05.433796Z","shell.execute_reply.started":"2025-01-13T19:35:02.466079Z","shell.execute_reply":"2025-01-13T19:35:05.432893Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"(df == \"\\\\N\").sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:35:05.434729Z","iopub.execute_input":"2025-01-13T19:35:05.435118Z","iopub.status.idle":"2025-01-13T19:35:08.371810Z","shell.execute_reply.started":"2025-01-13T19:35:05.435080Z","shell.execute_reply":"2025-01-13T19:35:08.370786Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:35:08.372911Z","iopub.execute_input":"2025-01-13T19:35:08.373189Z","iopub.status.idle":"2025-01-13T19:35:08.390100Z","shell.execute_reply.started":"2025-01-13T19:35:08.373165Z","shell.execute_reply":"2025-01-13T19:35:08.388890Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[['numVotes', 'startYear', 'endYear', 'isAdult', 'runtimeMinutes']] = df[['numVotes', 'startYear', 'endYear', 'isAdult', 'runtimeMinutes']].replace(\"\\\\N\", 0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:49:42.565226Z","iopub.execute_input":"2025-01-13T19:49:42.565639Z","iopub.status.idle":"2025-01-13T19:49:43.930705Z","shell.execute_reply.started":"2025-01-13T19:49:42.565607Z","shell.execute_reply":"2025-01-13T19:49:43.929580Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[['numVotes', 'startYear', 'endYear', 'isAdult', 'runtimeMinutes']] = df[['numVotes', 'startYear', 'endYear', 'isAdult', 'runtimeMinutes']].astype(int)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:49:44.952529Z","iopub.execute_input":"2025-01-13T19:49:44.952946Z","iopub.status.idle":"2025-01-13T19:49:45.865903Z","shell.execute_reply.started":"2025-01-13T19:49:44.952913Z","shell.execute_reply":"2025-01-13T19:49:45.864912Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.to_csv(\"df.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:49:51.643555Z","iopub.execute_input":"2025-01-13T19:49:51.643926Z","iopub.status.idle":"2025-01-13T19:50:29.153418Z","shell.execute_reply.started":"2025-01-13T19:49:51.643895Z","shell.execute_reply":"2025-01-13T19:50:29.152175Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_3[df_3['genres'].str.lower().str.contains(\"stoner\")]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:50:29.154945Z","iopub.execute_input":"2025-01-13T19:50:29.155309Z","iopub.status.idle":"2025-01-13T19:50:30.646791Z","shell.execute_reply.started":"2025-01-13T19:50:29.155266Z","shell.execute_reply":"2025-01-13T19:50:30.645878Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"all_genres = []\ngenre_list = df_3['genres'].values\nfor i in tqdm(genre_list):\n    all_genres+=i.split(\",\")\n    #print(i.split(\",\"))\n    #break\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:50:30.648582Z","iopub.execute_input":"2025-01-13T19:50:30.648929Z","iopub.status.idle":"2025-01-13T19:50:32.103458Z","shell.execute_reply.started":"2025-01-13T19:50:30.648901Z","shell.execute_reply":"2025-01-13T19:50:32.102360Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"list(set(all_genres))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:50:32.104679Z","iopub.execute_input":"2025-01-13T19:50:32.105072Z","iopub.status.idle":"2025-01-13T19:50:32.385823Z","shell.execute_reply.started":"2025-01-13T19:50:32.105036Z","shell.execute_reply":"2025-01-13T19:50:32.384596Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from huggingface_hub.hf_api import HfFolder\nHfFolder.save_token(\"YOUR_HUGGINGFACE_TOKEN\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:53:11.678652Z","iopub.execute_input":"2025-01-13T19:53:11.679365Z","iopub.status.idle":"2025-01-13T19:53:11.685836Z","shell.execute_reply.started":"2025-01-13T19:53:11.679332Z","shell.execute_reply":"2025-01-13T19:53:11.684536Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nfrom huggingface_hub import HfApi, login\nimport pandas as pd\nfrom datasets import load_dataset,Dataset\ncache_dir = \"/kaggle/working/\"\n# download the dataset\n# fw = load_dataset(\n#     \"ArchaeonSeq/MovieImdb\",\n#     name=\"default\",\n#     split=\"train\",\n#     #num_proc=10,\n#     #cache_dir=cache_dir,\n# )\n\n\n# #fw.to_parquet(parquet_dir)\n# df = fw.to_pandas()\n#df.sample(10)\n\n# Step 1: Log in to Hugging Face Hub\nlogin()\n\n# Step 2: Load your processed DataFrame (assuming it's already processed)\n# df = ...\n\n# Step 3: Save the DataFrame to a CSV file\n# df.to_csv(\"df.csv\", index=False)\n\n# Step 4: Upload the CSV file to the Hub\napi = HfApi()\napi.upload_file(\n    path_or_fileobj=\"df.csv\",  # Path to the local CSV file\n    path_in_repo=\"df.csv\",     # Path to the file in the dataset repository\n    repo_id=\"ArchaeonSeq/MovieImdb\",  # Repository ID\n    repo_type=\"dataset\",       # Type of repository (dataset)\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T19:53:12.711436Z","iopub.execute_input":"2025-01-13T19:53:12.711905Z","iopub.status.idle":"2025-01-13T19:53:15.184475Z","shell.execute_reply.started":"2025-01-13T19:53:12.711870Z","shell.execute_reply":"2025-01-13T19:53:15.183540Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}